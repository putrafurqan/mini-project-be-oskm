    // This is your Prisma schema file,
    // learn more about it in the docs: https://pris.ly/d/prisma-schema

    generator client {
        provider        = "prisma-client-js"
        previewFeatures = ["jsonProtocol", "metrics", "tracing", "extendedWhereUnique"]
        binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
    }

    datasource db {
        provider = "postgresql"
        // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
        // Further reading:
        // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
        // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
        url      = env("DATABASE_URL")
    }

    model User {
        id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
        nim          String   @unique
        passwordHash String
        role         UserRole @default(USER)
        createdAt    DateTime @default(now())
        updatedAt    DateTime @default(now()) @updatedAt
    }

    model Student {
        id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
        first_name  String @db.VarChar(50) 
        last_name  String @db.VarChar(50) 
        createdAt DateTime @default(now())
        updatedAt DateTime @default(now()) @updatedAt
        courseId String @db.Uuid()

        // N to N Relation
        course      Course @relation(fields: [courseId], references: [id])
    }
    model Course {
        id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
        name  String @db.VarChar(50) 
        credits  Int 
        createdAt DateTime @default(now())
        updatedAt DateTime @default(now()) @updatedAt
        
        // N to N Relation
        student     Student[]
        enrollment Enrollment[]
    }
    model Enrollment {
        id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
        enrollment_date DateTime @default(now()) 
        createdAt DateTime @default(now())
        updatedAt DateTime @default(now()) @updatedAt
        courseId String @db.Uuid()
        studentId String @db.Uuid()

        course Course @relation(fields: [courseId], references: [id])
        //student Student @relation(fields: [studentId], references: [id])
        
    }

    enum UserRole {
        ADMIN
        USER
    }
